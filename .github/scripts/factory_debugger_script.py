import os
import re
import json
import base64
import sys
import requests
import google.generativeai as genai
import zipfile
import io
import traceback
from pathlib import Path

# ==============================================================================
# I. C·∫§U H√åNH V√Ä L·∫§Y BI·∫æN M√îI TR∆Ø·ªúNG
# ==============================================================================
print("--- ü§ñ Factory Self-Debugger v1.0 Initializing ---")
try:
    FAILED_RUN_ID = os.environ["FAILED_RUN_ID"]
    GEMINI_API_KEY = os.environ["GEMINI_API_KEY"]
    GITHUB_TOKEN = os.environ["GITHUB_TOKEN"] # ƒê√¢y l√† GH_PAT
    REPO_FULL_NAME = os.environ["REPO_TO_FIX"] # v√≠ d·ª• "tanvu2607/ai-factory"
    FILE_TO_FIX_PATH = os.environ["FILE_TO_FIX"] # v√≠ d·ª• ".github/scripts/genesis.py"
    REPO_OWNER, REPO_NAME = REPO_FULL_NAME.split('/')
except KeyError as e:
    print(f"‚ùå L·ªñI: Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng: {e}")
    sys.exit(1)

API_BASE_URL = "https://api.github.com"
HEADERS = {"Authorization": f"Bearer {GITHUB_TOKEN}", "Accept": "application/vnd.github.v3+json"}
genai.configure(api_key=GEMINI_API_KEY)

# ==============================================================================
# II. C√ÅC H√ÄM TI·ªÜN √çCH
# ==============================================================================

def download_and_extract_logs():
    print(f"--- üì• ƒêang t·∫£i log c·ªßa l·∫ßn ch·∫°y th·∫•t b·∫°i: {FAILED_RUN_ID} ---")
    logs_url = f"{API_BASE_URL}/repos/{REPO_FULL_NAME}/actions/runs/{FAILED_RUN_ID}/logs"
    for i in range(3):
        response = requests.get(logs_url, headers=HEADERS, stream=True, timeout=60)
        if response.status_code == 200:
            with zipfile.ZipFile(io.BytesIO(response.content)) as z:
                # T√¨m file log c·ªßa job c√≥ kh·∫£ nƒÉng b·ªã l·ªói nh·∫•t
                log_file_name = next((name for name in z.namelist() if 'generate-app' in name and name.endswith('.txt')), z.namelist()[0])
                with z.open(log_file_name) as f:
                    log_content = f.read().decode('utf-8', errors='ignore')
            # L·∫•y 300 d√≤ng cu·ªëi ƒë·ªÉ c√≥ ƒë·ªß ng·ªØ c·∫£nh
            return "\n".join(log_content.splitlines()[-300:])
        print(f"Log ch∆∞a s·∫µn s√†ng (status: {response.status_code}), ƒë·ª£i 10 gi√¢y... (l·∫ßn {i+1})")
        time.sleep(10)
    raise Exception("Kh√¥ng th·ªÉ t·∫£i log l·ªói sau nhi·ªÅu l·∫ßn th·ª≠.")

def get_file_to_fix_content():
    print(f"--- üìÑ ƒêang ƒë·ªçc n·ªôi dung c·ªßa file b·ªã l·ªói: {FILE_TO_FIX_PATH} ---")
    url = f"{API_BASE_URL}/repos/{REPO_FULL_NAME}/contents/{FILE_TO_FIX_PATH}"
    response = requests.get(url, headers=HEADERS, timeout=30).json()
    return base64.b64decode(response['content']).decode('utf-8')

def call_gemini_for_fix(error_log, original_code):
    print("--- üß† ƒêang g·ª≠i th√¥ng tin cho Gemini 1.5 Pro ƒë·ªÉ ph√¢n t√≠ch v√† s·ª≠a l·ªói ---")
    
    debug_prompt = f"""
    B·∫°n l√† m·ªôt k·ªπ s∆∞ ph·∫ßn m·ªÅm Python Senior chuy√™n g·ª° l·ªói c√°c h·ªá th·ªëng t·ª± ƒë·ªông h√≥a tr√™n GitHub Actions.
    M·ªôt workflow ƒë√£ th·∫•t b·∫°i. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch log l·ªói, t√¨m ra nguy√™n nh√¢n trong m√£ ngu·ªìn Python v√† vi·∫øt l·∫°i to√†n b·ªô file ƒë·ªÉ s·ª≠a l·ªói ƒë√≥.

    --- LOG L·ªñI (300 d√≤ng cu·ªëi) ---
    ```
    {error_log}
    ```

    --- M√É NGU·ªíN G·ªêC C·ª¶A FILE `{FILE_TO_FIX_PATH}` ---
    ```python
    {original_code}
    ```

    **Y√äU C·∫¶U:**
    1.  **Ph√¢n t√≠ch nguy√™n nh√¢n g·ªëc r·ªÖ** c·ªßa l·ªói.
    2.  **Vi·∫øt l·∫°i TO√ÄN B·ªò n·ªôi dung** c·ªßa file `{FILE_TO_FIX_PATH}` v·ªõi b·∫£n v√° l·ªói. ƒê·∫£m b·∫£o code m·ªõi ph·∫£i ho√†n ch·ªânh v√† ƒë√∫ng c√∫ ph√°p.
    3.  Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt **ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t** c√≥ c·∫•u tr√∫c sau:
        `{{
          "analysis": "Ph√¢n t√≠ch ng·∫Øn g·ªçn, ch√≠nh x√°c v·ªÅ nguy√™n nh√¢n l·ªói.",
          "corrected_code": "To√†n b·ªô n·ªôi dung m·ªõi c·ªßa file ƒë√£ ƒë∆∞·ª£c s·ª≠a l·ªói.",
          "commit_message": "M·ªôt commit message m√¥ t·∫£ b·∫£n v√° l·ªói (v√≠ d·ª•: fix(genesis): Improve JSON parsing to handle control characters)"
        }}`
    """
    
    # D√πng model Pro ƒë·ªÉ c√≥ kh·∫£ nƒÉng suy lu·∫≠n t·ªët nh·∫•t
    model = genai.GenerativeModel("gemini-1.5-pro-latest")
    response = model.generate_content(debug_prompt, request_options={'timeout': 600})
    
    match = re.search(r'\{.*\}', response.text, re.DOTALL)
    if not match: raise ValueError(f"AI Debugger kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá. Ph·∫£n h·ªìi th√¥:\n{response.text}")
    
    print("   - ‚úÖ AI ƒë√£ ƒë·ªÅ xu·∫•t m·ªôt b·∫£n v√°.")
    return json.loads(match.group(0), strict=False)

def set_action_output(name, value):
    """Ghi gi√° tr·ªã v√†o GITHUB_OUTPUT ƒë·ªÉ c√°c step sau c√≥ th·ªÉ s·ª≠ d·ª•ng."""
    with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
        # X·ª≠ l√Ω chu·ªói nhi·ªÅu d√≤ng cho output
        value = value.replace('%', '%25').replace('\n', '%0A').replace('\r', '%0D')
        f.write(f"{name}={value}\n")

# ==============================================================================
# III. H√ÄM TH·ª∞C THI CH√çNH
# ==============================================================================
if __name__ == "__main__":
    try:
        error_log = download_and_extract_logs()
        original_code = get_file_to_fix_content()
        fix_suggestion = call_gemini_for_fix(error_log, original_code)

        # Ghi c√°c k·∫øt qu·∫£ ra GITHUB_OUTPUT
        set_action_output("analysis", fix_suggestion.get("analysis", "No analysis provided."))
        set_action_output("commit_message", fix_suggestion.get("commit_message", "fix(ai): Automated fix attempt"))
        
        # L∆∞u code ƒë√£ s·ª≠a v√†o m·ªôt file t·∫°m
        corrected_code = fix_suggestion.get("corrected_code")
        if corrected_code:
            Path(FILE_TO_FIX_PATH).parent.mkdir(parents=True, exist_ok=True)
            Path(FILE_TO_FIX_PATH).write_text(corrected_code, encoding="utf-8")
            print(f"   - ‚úÖ ƒê√£ ghi code ƒë√£ s·ª≠a v√†o file c·ª•c b·ªô: {FILE_TO_FIX_PATH}")
        else:
            raise ValueError("AI kh√¥ng cung c·∫•p code ƒë√£ s·ª≠a.")

    except Exception as e:
        print("--- ‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh g·ª° l·ªói ---")
        traceback.print_exc()
        # Ghi l·ªói ra output ƒë·ªÉ c√≥ th·ªÉ hi·ªÉn th·ªã trong PR
        set_action_output("analysis", f"An error occurred in the debugger:\n```\n{e}\n```")
        set_action_output("commit_message", "chore: Debugger failed to generate a fix")
        sys.exit(1)
