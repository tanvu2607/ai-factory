import os
import re
import json
import base64
import time
import sys
import requests
import google.generativeai as genai

# ==============================================================================
# I. C·∫§U H√åNH V√Ä L·∫§Y BI·∫æN M√îI TR∆Ø·ªúNG
# ==============================================================================
print("--- B∆∞·ªõc 1: ƒêang t·∫£i c·∫•u h√¨nh v√† bi·∫øn m√¥i tr∆∞·ªùng ---")
try:
    ISSUE_BODY = os.environ["ISSUE_BODY"]
    ISSUE_NUMBER = os.environ["ISSUE_NUMBER"]
    GEMINI_API_KEY = os.environ["GEMINI_API_KEY"]
    GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]
    REPO_OWNER = os.environ["GH_USER"]
    COMMIT_EMAIL = os.environ["COMMIT_EMAIL"]
    COMMIT_NAME = os.environ["COMMIT_NAME"]
except KeyError as e:
    print(f"‚ùå L·ªñI NGHI√äM TR·ªåNG: Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc: {e}")
    sys.exit(1)

COMMIT_AUTHOR = {"name": COMMIT_NAME, "email": COMMIT_EMAIL}
API_BASE_URL = "https://api.github.com"
HEADERS = {"Authorization": f"Bearer {GITHUB_TOKEN}", "Accept": "application/vnd.github.v3+json"}

# N·ªòI DUNG WORKFLOW ƒê√É ƒê∆Ø·ª¢C N√ÇNG C·∫§P V·ªöI KH·∫¢ NƒÇNG "B√ÅO L·ªñI"
FLUTTER_WORKFLOW_CONTENT = r"""
name: Build and Release Flutter APK
on: [push, workflow_dispatch]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { java-version: '17', distribution: 'temurin' }
      - uses: subosito/flutter-action@v2
        with: { channel: 'stable' }
      - run: flutter pub get
      - name: Decode Keystore and Create Properties
        run: |
          mkdir -p android/app
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          echo "storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=../app/upload-keystore.jks" >> android/key.properties
      - name: Build APK
        run: |
          flutter clean
          flutter build apk --release
      - uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
      - name: Report Build Failure to AI Factory
        if: failure()
        env:
          # D√πng PAT ƒë√£ ƒë∆∞·ª£c l∆∞u trong secrets c·ªßa repo n√†y ƒë·ªÉ c√≥ quy·ªÅn t·∫°o Issue
          GH_PAT: ${{ secrets.GH_PAT_FOR_ISSUES }}
        run: |
          # L·∫•y log l·ªói (c·∫ßn c·∫£i ti·∫øn sau)
          # T·∫°m th·ªùi ch·ªâ b√°o c√°o l·ªói chung
          ERROR_LOG="Build failed. Please check the workflow run for details."

          # T·∫°o n·ªôi dung JSON cho issue
          ISSUE_JSON=$(printf '{
            "title": "Build Failed for ${{ github.repository }}",
            "body": "### üö® Build Failure Report\n\nA build has failed in the **${{ github.repository }}** repository.\n\n- **Repo:** `${{ github.repository }}`\n- **Workflow Run URL:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n- **Commit:** `${{ github.sha }}`\n\n**Error Log Snippet:**\n```\n%s\n```",
            "labels": ["bug-report", "auto-generated"]
          }' "$ERROR_LOG")

          # G·ª≠i y√™u c·∫ßu t·∫°o issue
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_PAT" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository_owner }}/ai-factory/issues \
            -d "$ISSUE_JSON"
"""

# ==============================================================================
# II. C√ÅC H√ÄM TI·ªÜN √çCH
# ==============================================================================

def post_issue_comment(message):
    print(f"--- üí¨ Ph·∫£n h·ªìi l√™n Issue #{ISSUE_NUMBER} ---")
    url = f"{API_BASE_URL}/repos/{REPO_OWNER}/ai-factory/issues/{ISSUE_NUMBER}/comments"
    try:
        response = requests.post(url, headers=HEADERS, json={"body": message}, timeout=30)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ comment l√™n issue. L·ªói: {e}")

def parse_issue_body(body):
    print("--- B∆∞·ªõc 2: ƒêang ph√¢n t√≠ch y√™u c·∫ßu t·ª´ Issue ---")
    params = {}
    pattern = re.compile(r"### (.*?)\s*\n\s*(.*?)\s*(?=\n###|$)", re.DOTALL)
    
    for match in pattern.finditer(body):
        key = match.group(1).strip().lower().replace(' ', '_').replace('(', '').replace(')', '')
        value = match.group(2).strip()
        params[key] = value

    final_params = {
        "repo_name": params.get("new_repository_name"),
        "language": params.get("language_or_framework"),
        "ai_model": params.get("gemini_model"),
        "prompt": params.get("detailed_prompt_the_blueprint"),
    }
    
    if not all(final_params.values()):
        missing = [k for k, v in final_params.items() if not v]
        raise ValueError(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch ƒë·ªß th√¥ng tin t·ª´ Issue. C√°c tr∆∞·ªùng b·ªã thi·∫øu: {missing}")
    
    final_params['prompt'] = final_params['prompt'].replace("```text", "").replace("```", "").strip()
    print(f"   - ‚úÖ Ph√¢n t√≠ch th√†nh c√¥ng. Repo m·ªõi: {final_params['repo_name']}")
    return final_params

def call_gemini(user_prompt, language, model_name):
    print(f"--- B∆∞·ªõc 3: ƒêang g·ªçi AI ({model_name}) ƒë·ªÉ t·∫°o code ---")
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel(model_name)
    
    final_prompt = f"""
    B·∫°n l√† m·ªôt k·ªπ s∆∞ ph·∫ßn m·ªÅm chuy√™n v·ªÅ {language}.
    D·ª±a tr√™n y√™u c·∫ßu sau: "{user_prompt}"
    H√£y t·∫°o ra c·∫•u tr√∫c file v√† th∆∞ m·ª•c ho√†n ch·ªânh, s·∫µn s√†ng ƒë·ªÉ build.
    Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON l·ªìng nhau duy nh·∫•t, bao b·ªçc trong kh·ªëi ```json ... ```.
    """
    response = model.generate_content(final_prompt, request_options={'timeout': 300})
    
    match = re.search(r'```json\s*(\{.*?\})\s*```', response.text, re.DOTALL)
    if not match: match = re.search(r'\{.*\}', response.text, re.DOTALL)
    if not match: raise ValueError(f"AI kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá. Ph·∫£n h·ªìi th√¥:\n{response.text}")
    
    print("   - ‚úÖ AI ƒë√£ t·∫°o code th√†nh c√¥ng.")
    return json.loads(match.group(0), strict=False)

def create_and_commit_project(repo_name, file_tree):
    print(f"--- B∆∞·ªõc 4: ƒêang t·∫°o repository m·ªõi: {repo_name} ---")
    repo_url = f"{API_BASE_URL}/user/repos"
    repo_data = {"name": repo_name, "private": False, "auto_init": True}
    requests.post(repo_url, headers=HEADERS, json=repo_data).raise_for_status()
    print("   - ‚úÖ Repo ƒë√£ ƒë∆∞·ª£c t·∫°o. ƒê·ª£i 5 gi√¢y...")
    time.sleep(5)

    print(f"--- B∆∞·ªõc 5: ƒêang commit {len(file_tree)} file l√™n repo m·ªõi ---")
    ref_url = f"{API_BASE_URL}/repos/{REPO_OWNER}/{repo_name}/git/refs/heads/main"
    main_ref = requests.get(ref_url, headers=HEADERS).json()
    latest_commit_sha = main_ref['object']['sha']
    base_tree_sha = requests.get(main_ref['object']['url'], headers=HEADERS).json()['tree']['sha']
    
    tree_elements = []
    for path, content in file_tree.items():
        if not isinstance(content, str): continue
        blob_url = f"{API_BASE_URL}/repos/{REPO_OWNER}/{repo_name}/git/blobs"
        blob_data = {"content": content, "encoding": "utf-8"}
        blob_sha = requests.post(blob_url, headers=HEADERS, json=blob_data).json()['sha']
        tree_elements.append({"path": path, "mode": "100644", "type": "blob", "sha": blob_sha})
        
    tree_url = f"{API_BASE_URL}/repos/{REPO_OWNER}/{repo_name}/git/trees"
    tree_data = {"base_tree": base_tree_sha, "tree": tree_elements}
    new_tree_sha = requests.post(tree_url, headers=HEADERS, json=tree_data).json()['sha']
    
    commit_url = f"{API_BASE_URL}/repos/{REPO_OWNER}/{repo_name}/git/commits"
    commit_data = {
        "message": "feat: Initial project structure by AI Factory",
        "author": COMMIT_AUTHOR, "parents": [latest_commit_sha], "tree": new_tree_sha
    }
    new_commit_sha = requests.post(commit_url, headers=HEADERS, json=commit_data).json()['sha']
    
    requests.patch(ref_url, headers=HEADERS, json={"sha": new_commit_sha}).raise_for_status()
    print("   - ‚úÖ ƒê√£ commit t·∫•t c·∫£ file th√†nh c√¥ng!")

# ==============================================================================
# III. H√ÄM TH·ª∞C THI CH√çNH
# ==============================================================================
if __name__ == "__main__":
    try:
        params = parse_issue_body(ISSUE_BODY)
        repo_name = params['repo_name']
        language = params['language']
        ai_model = params['ai_model']
        user_prompt = params['prompt']
        
        post_issue_comment(f"‚úÖ ƒê√£ nh·∫≠n y√™u c·∫ßu cho repo `{repo_name}`. B·∫Øt ƒë·∫ßu g·ªçi AI ({ai_model})...")
        
        file_tree = call_gemini(user_prompt, language, ai_model)
        
        if language.lower() == 'flutter':
            print("   - D·ª± √°n Flutter, ƒëang th√™m workflow build APK...")
            file_tree[".github/workflows/build_and_release.yml"] = FLUTTER_WORKFLOW_CONTENT
            post_issue_comment("‚öôÔ∏è ƒê√£ th√™m workflow t·ª± ƒë·ªông build APK.")
        
        create_and_commit_project(repo_name, file_tree)
        
        success_message = f"""
        üéâ **D·ª± √°n `{repo_name}` ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!**

        - **Link Repository:** https://github.com/{REPO_OWNER}/{repo_name}
        - **H√†nh ƒë·ªông ti·∫øp theo:**
          1. **Th√™m Secrets:** ƒê·ªÉ workflow build APK ho·∫°t ƒë·ªông, b·∫°n c·∫ßn v√†o repo m·ªõi, ƒëi t·ªõi `Settings > Secrets and variables > Actions` v√† th√™m c√°c secret `RELEASE_KEYSTORE_BASE64`, `RELEASE_KEYSTORE_PASSWORD`, `RELEASE_KEY_ALIAS`, `RELEASE_KEY_PASSWORD`, v√† **quan tr·ªçng l√† `GH_PAT_FOR_ISSUES`** (d√°n ch√≠nh PAT b·∫°n ƒëang d√πng cho `ai-factory`).
          2. **K√≠ch ho·∫°t Workflow:** Workflow s·∫Ω t·ª± ch·∫°y sau khi ƒë∆∞·ª£c commit.
        """
        post_issue_comment(success_message)
        
    except Exception as e:
        import traceback
        error_trace = traceback.format_exc()
        error_message = f"‚ùå **ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng:**\n\n**L·ªói:**\n```\n{e}\n```\n\n**Traceback:**\n```\n{error_trace}\n```"
        post_issue_comment(error_message)
        sys.exit(1)
