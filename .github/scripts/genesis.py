import os
import re
import json
import base64
import time
import requests
import google.generativeai as genai

# --- L·∫§Y TH√îNG TIN T·ª™ M√îI TR∆Ø·ªúNG ACTION ---
issue_body = os.environ.get("ISSUE_BODY")
issue_number = os.environ.get("ISSUE_NUMBER")
gemini_key = os.environ.get("GEMINI_API_KEY")
github_token = os.environ.get("GITHUB_TOKEN")
github_user = os.environ.get("GH_USER")
commit_email = os.environ.get("COMMIT_EMAIL")
commit_name = os.environ.get("COMMIT_NAME")

REPO_OWNER = github_user
COMMIT_AUTHOR = {"name": commit_name, "email": commit_email}

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---

def parse_issue(body):
    """Ph√¢n t√≠ch n·ªôi dung c·ªßa issue ƒë·ªÉ l·∫•y ra c√°c tham s·ªë."""
    params = {}
    fields = ["repo_name", "language", "ai_model", "prompt"]
    for field in fields:
        # D√πng regex ƒë·ªÉ t√¨m gi√° tr·ªã c·ªßa t·ª´ng field trong issue body
        match = re.search(rf"### {field}\s*\n\s*(.*?)\s*(?=\n###|$)", body, re.DOTALL)
        if match:
            params[field] = match.group(1).strip()
    if not all(params.get(f) for f in fields):
        raise ValueError("Kh√¥ng th·ªÉ ph√¢n t√≠ch ƒë·ªß th√¥ng tin t·ª´ Issue. H√£y ch·∫Øc ch·∫Øn form ƒë∆∞·ª£c ƒëi·ªÅn ƒë·∫ßy ƒë·ªß.")
    return params

def call_gemini(user_prompt, language, model_name):
    """G·ªçi Gemini ƒë·ªÉ t·∫°o c·∫•u tr√∫c d·ª± √°n."""
    genai.configure(api_key=gemini_key)
    model = genai.GenerativeModel(model_name)
    
    # (N·ªôi dung prompt n√†y gi·ªëng h·ªát nh∆∞ trong buildai)
    final_prompt = f"""
    B·∫°n l√† m·ªôt k·ªπ s∆∞ ph·∫ßn m·ªÅm chuy√™n v·ªÅ {language}.
    D·ª±a tr√™n y√™u c·∫ßu sau: "{user_prompt}"
    H√£y tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON l·ªìng nhau duy nh·∫•t, bao b·ªçc trong kh·ªëi ```json ... ```.
    """
    response = model.generate_content(final_prompt)
    
    match = re.search(r'```json\s*(\{.*?\})\s*```', response.text, re.DOTALL)
    if not match: match = re.search(r'\{.*\}', response.text, re.DOTALL)
    if not match: raise ValueError("AI kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá.")
    
    return json.loads(match.group(0), strict=False)

def github_api_request(method, url, data=None):
    """H√†m chung ƒë·ªÉ g·ªçi GitHub API."""
    headers = {"Authorization": f"token {github_token}", "Accept": "application/vnd.github.v3+json"}
    try:
        response = requests.request(method, url, headers=headers, json=data)
        response.raise_for_status()
        return response.json() if response.content else None
    except requests.exceptions.HTTPError as e:
        print(f"L·ªói API GitHub ({e.response.status_code}): {e.response.text}")
        raise

def create_repo(repo_name):
    """T·∫°o m·ªôt repository m·ªõi."""
    print(f"T·∫°o repo m·ªõi: {repo_name}...")
    url = "https://api.github.com/user/repos"
    data = {"name": repo_name, "private": False, "auto_init": True} # auto_init ƒë·ªÉ c√≥ nh√°nh main
    github_api_request("POST", url, data)
    time.sleep(5) # ƒê·ª£i GitHub t·∫°o repo xong

def commit_files(repo_name, file_tree):
    """S·ª≠ d·ª•ng Git Trees API ƒë·ªÉ commit nhi·ªÅu file c√πng l√∫c."""
    print("B·∫Øt ƒë·∫ßu commit file...")
    # L·∫•y commit v√† tree SHA m·ªõi nh·∫•t c·ªßa nh√°nh main
    main_ref = github_api_request("GET", f"https://api.github.com/repos/{REPO_OWNER}/{repo_name}/git/ref/heads/main")
    latest_commit_sha = main_ref['object']['sha']
    base_tree_sha = github_api_request("GET", f"https://api.github.com/repos/{REPO_OWNER}/{repo_name}/git/commits/{latest_commit_sha}")['tree']['sha']

    # T·∫°o c√°c blob cho t·ª´ng file
    tree_elements = []
    for path, content in file_tree.items():
        blob = github_api_request("POST", f"https://api.github.com/repos/{REPO_OWNER}/{repo_name}/git/blobs", {
            "content": content,
            "encoding": "utf-8"
        })
        tree_elements.append({
            "path": path,
            "mode": "100644",
            "type": "blob",
            "sha": blob['sha']
        })
    
    # T·∫°o m·ªôt tree m·ªõi
    new_tree = github_api_request("POST", f"https://api.github.com/repos/{REPO_OWNER}/{repo_name}/git/trees", {
        "base_tree": base_tree_sha,
        "tree": tree_elements
    })
    
    # T·∫°o commit m·ªõi
    new_commit = github_api_request("POST", f"https://api.github.com/repos/{REPO_OWNER}/{repo_name}/git/commits", {
        "message": "feat: Initial commit by AI Factory",
        "author": COMMIT_AUTHOR,
        "parents": [latest_commit_sha],
        "tree": new_tree['sha']
    })
    
    # C·∫≠p nh·∫≠t ƒë·∫ßu c·ªßa nh√°nh main ƒë·ªÉ tr·ªè v√†o commit m·ªõi
    github_api_request("POST", f"https://api.github.com/repos/{REPO_OWNER}/{repo_name}/git/refs/heads/main", {
        "sha": new_commit['sha']
    })
    print("Commit file th√†nh c√¥ng!")

def comment_on_issue(message):
    """Vi·∫øt comment ph·∫£n h·ªìi v√†o issue."""
    url = f"https://api.github.com/repos/{REPO_OWNER}/ai-factory/issues/{issue_number}/comments"
    github_api_request("POST", url, {"body": message})

# --- H√ÄM TH·ª∞C THI CH√çNH ---
try:
    print("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Issue...")
    params = parse_issue(issue_body)
    repo_name, language, model, prompt = params['repo_name'], params['language'], params['ai_model'], params['prompt']
    
    comment_on_issue(f"‚úÖ ƒê√£ nh·∫≠n y√™u c·∫ßu t·∫°o repo `{repo_name}`. B·∫Øt ƒë·∫ßu g·ªçi AI...")
    
    file_tree = call_gemini(prompt, language, model)
    
    # (C√≥ th·ªÉ th√™m file workflow v√†o ƒë√¢y n·∫øu mu·ªën)
    
    comment_on_issue("‚úÖ AI ƒë√£ t·∫°o code th√†nh c√¥ng. B·∫Øt ƒë·∫ßu t·∫°o repo v√† commit file...")
    
    create_repo(repo_name)
    commit_files(repo_name, file_tree)
    
    success_message = f"""
    üéâ **D·ª± √°n `{repo_name}` ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!**

    - **Link Repository:** https://github.com/{REPO_OWNER}/{repo_name}
    - M·ªôt workflow build s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c k√≠ch ho·∫°t. H√£y v√†o tab 'Actions' c·ªßa repo m·ªõi ƒë·ªÉ theo d√µi.
    """
    comment_on_issue(success_message)
    
except Exception as e:
    error_message = f"‚ùå **ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t·ª± ƒë·ªông h√≥a:**\n\n```\n{e}\n```"
    comment_on_issue(error_message)
    sys.exit(1)
