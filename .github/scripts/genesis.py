import os
import re
import json
import base64
import time
import sys
import requests
import google.generativeai as genai

# ==============================================================================
# I. C·∫§U H√åNH V√Ä L·∫§Y BI·∫æN M√îI TR∆Ø·ªúNG
# ==============================================================================
print("--- B∆∞·ªõc 1: ƒêang t·∫£i c·∫•u h√¨nh v√† bi·∫øn m√¥i tr∆∞·ªùng ---")
try:
    ISSUE_BODY = os.environ["ISSUE_BODY"]
    ISSUE_NUMBER = os.environ["ISSUE_NUMBER"]
    GEMINI_API_KEY = os.environ["GEMINI_API_KEY"]
    GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]
    REPO_OWNER = os.environ["GH_USER"]
    COMMIT_EMAIL = os.environ["COMMIT_EMAIL"]
    COMMIT_NAME = os.environ["COMMIT_NAME"]
except KeyError as e:
    print(f"‚ùå L·ªñI NGHI√äM TR·ªåNG: Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc: {e}")
    sys.exit(1)

COMMIT_AUTHOR = {"name": COMMIT_NAME, "email": COMMIT_EMAIL}
API_BASE_URL = "https://api.github.com"

FLUTTER_WORKFLOW_CONTENT = r"""
name: Build and Release Flutter APK
on: [push, workflow_dispatch]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { java-version: '17', distribution: 'temurin' }
      - uses: subosito/flutter-action@v2
        with: { channel: 'stable' }
      - run: flutter pub get
      - run: mkdir -p android/app
      - name: Decode Keystore
        run: echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=../app/upload-keystore.jks" >> android/key.properties
      - name: Build APK
        run: |
          flutter clean
          flutter build apk --release
      - uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
"""

# ==============================================================================
# II. C√ÅC H√ÄM TI·ªÜN √çCH
# ==============================================================================

def github_api_request(method, url, json_data=None):
    """H√†m chung ƒë·ªÉ g·ª≠i y√™u c·∫ßu ƒë·∫øn GitHub API, ƒë√£ ƒë∆∞·ª£c s·ª≠a l·ªói."""
    headers = {"Authorization": f"Bearer {GITHUB_TOKEN}", "Accept": "application/vnd.github.v3+json"}
    try:
        # Chuy·ªÉn ƒë·ªïi json_data th√†nh chu·ªói JSON n·∫øu n√≥ l√† m·ªôt dictionary
        data_payload = json.dumps(json_data) if json_data else None
        response = requests.request(method, url, headers=headers, data=data_payload, timeout=60)
        response.raise_for_status()
        # Tr·∫£ v·ªÅ None n·∫øu kh√¥ng c√≥ n·ªôi dung (v√≠ d·ª•: status 204)
        return response.json() if response.status_code != 204 and response.content else None
    except requests.exceptions.HTTPError as e:
        print(f"L·ªói API GitHub ({e.response.status_code}) khi g·ªçi {method} {url}: {e.response.text}")
        raise

def parse_issue_body(body):
    """Ph√¢n t√≠ch n·ªôi dung c·ªßa issue v√† d·ªçn d·∫πp prompt."""
    print("--- B∆∞·ªõc 2: ƒêang ph√¢n t√≠ch n·ªôi dung y√™u c·∫ßu t·ª´ Issue ---")
    params = {}
    pattern = re.compile(r"### (.*?)\s*\n\s*(.*?)\s*(?=\n###|$)", re.DOTALL)
    
    for match in pattern.finditer(body):
        key = match.group(1).strip().lower().replace(' ', '_')
        value = match.group(2).strip()
        params[key] = value

    final_params = {
        "repo_name": params.get("new_repository_name"),
        "language": params.get("language_or_framework"),
        "ai_model": params.get("gemini_model"),
        "prompt": params.get("detailed_prompt_(the_blueprint)"),
    }
    
    if not all(final_params.values()):
        missing = [k for k, v in final_params.items() if not v]
        raise ValueError(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch ƒë·ªß th√¥ng tin t·ª´ Issue. C√°c tr∆∞·ªùng b·ªã thi·∫øu: {missing}")

    # D·ªçn d·∫πp prompt, lo·∫°i b·ªè c√°c kh·ªëi markdown
    final_params['prompt'] = final_params['prompt'].replace("```text", "").replace("```", "").strip()
    
    print(f"   - Repo m·ªõi: {final_params['repo_name']}")
    return final_params

def call_gemini(user_prompt, language, model_name):
    # ... (H√†m n√†y gi·ªØ nguy√™n nh∆∞ c≈©, kh√¥ng c·∫ßn s·ª≠a) ...
    print(f"--- B∆∞·ªõc 3: ƒêang g·ªçi AI ({model_name}) ƒë·ªÉ t·∫°o code ---")
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel(model_name)
    final_prompt = f"""
    B·∫°n l√† m·ªôt k·ªπ s∆∞ ph·∫ßn m·ªÅm chuy√™n v·ªÅ {language}.
    D·ª±a tr√™n y√™u c·∫ßu sau: "{user_prompt}"
    H√£y t·∫°o ra c·∫•u tr√∫c file v√† th∆∞ m·ª•c ho√†n ch·ªânh, s·∫µn s√†ng ƒë·ªÉ build.
    Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON l·ªìng nhau duy nh·∫•t, bao b·ªçc trong kh·ªëi ```json ... ```.
    """
    response = model.generate_content(final_prompt, request_options={'timeout': 300})
    match = re.search(r'```json\s*(\{.*?\})\s*```', response.text, re.DOTALL)
    if not match: match = re.search(r'\{.*\}', response.text, re.DOTALL)
    if not match: raise ValueError(f"AI kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá. Ph·∫£n h·ªìi th√¥:\n{response.text}")
    return json.loads(match.group(0), strict=False)

def create_repo(repo_name):
    # ... (H√†m n√†y gi·ªØ nguy√™n) ...
    print(f"--- B∆∞·ªõc 4: ƒêang t·∫°o repository m·ªõi: {repo_name} ---")
    url = f"{API_BASE_URL}/user/repos"
    data = {"name": repo_name, "private": False, "auto_init": True}
    github_api_request("POST", url, data)
    time.sleep(5)

def commit_files_via_api(repo_name, file_tree):
    # ... (H√†m n√†y gi·ªØ nguy√™n) ...
    print(f"--- B∆∞·ªõc 5: ƒêang chu·∫©n b·ªã v√† commit {len(file_tree)} file l√™n repo ---")
    main_ref = github_api_request("GET", f"{API_BASE_URL}/repos/{REPO_OWNER}/{repo_name}/git/ref/heads/main")
    latest_commit_sha = main_ref['object']['sha']
    base_tree_sha = github_api_request("GET", f"{API_BASE_URL}/repos/{REPO_OWNER}/{repo_name}/git/commits/{latest_commit_sha}")['tree']['sha']
    tree_elements = []
    for path, content in file_tree.items():
        if not isinstance(content, str): continue
        blob = github_api_request("POST", f"{API_BASE_URL}/repos/{REPO_OWNER}/{repo_name}/git/blobs", {
            "content": content, "encoding": "utf-8"
        })
        tree_elements.append({"path": path, "mode": "100644", "type": "blob", "sha": blob['sha']})
    new_tree = github_api_request("POST", f"{API_BASE_URL}/repos/{REPO_OWNER}/{repo_name}/git/trees", {
        "base_tree": base_tree_sha, "tree": tree_elements
    })
    new_commit = github_api_request("POST", f"{API_BASE_URL}/repos/{REPO_OWNER}/{repo_name}/git/commits", {
        "message": "feat: Initial project structure generated by AI Factory",
        "author": COMMIT_AUTHOR, "parents": [latest_commit_sha], "tree": new_tree['sha']
    })
    github_api_request("PATCH", f"{API_BASE_URL}/repos/{REPO_OWNER}/{repo_name}/git/refs/heads/main", {"sha": new_commit['sha']})
    print("   - ‚úÖ ƒê√£ commit t·∫•t c·∫£ file th√†nh c√¥ng!")


def comment_on_issue(message):
    """Vi·∫øt comment ph·∫£n h·ªìi v√†o issue g·ªëc."""
    print(f"--- Ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng tr√™n Issue #{ISSUE_NUMBER} ---")
    url = f"{API_BASE_URL}/repos/{REPO_OWNER}/ai-factory/issues/{ISSUE_NUMBER}/comments"
    # D√πng `json=` thay v√¨ `data=` ƒë·ªÉ requests t·ª± x·ª≠ l√Ω header v√† encoding
    github_api_request("POST", url, json_data={"body": message})

# ==============================================================================
# III. H√ÄM TH·ª∞C THI CH√çNH
# ==============================================================================
if __name__ == "__main__":
    try:
        params = parse_issue_body(ISSUE_BODY)
        repo_name = params['repo_name']
        language = params['language']
        ai_model = params['ai_model']
        user_prompt = params['prompt']
        
        comment_on_issue(f"‚úÖ ƒê√£ nh·∫≠n y√™u c·∫ßu cho repo `{repo_name}`. B·∫Øt ƒë·∫ßu g·ªçi AI ({ai_model})...")
        
        file_tree = call_gemini(user_prompt, language, ai_model)
        
        if language.lower() == 'flutter':
            print("   - D·ª± √°n Flutter, ƒëang th√™m workflow build APK...")
            file_tree[".github/workflows/build_and_release.yml"] = FLUTTER_WORKFLOW_CONTENT
            comment_on_issue("‚öôÔ∏è ƒê√£ th√™m workflow t·ª± ƒë·ªông build APK v√†o d·ª± √°n.")
        
        create_repo(repo_name)
        commit_files_via_api(repo_name, file_tree)
        
        success_message = f"""
        üéâ **D·ª± √°n `{repo_name}` ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!**

        - **Link Repository:** https://github.com/{REPO_OWNER}/{repo_name}
        - **H√†nh ƒë·ªông ti·∫øp theo:**
          1. **Th√™m Secrets:** ƒê·ªÉ workflow build APK ho·∫°t ƒë·ªông, b·∫°n c·∫ßn v√†o repo m·ªõi, ƒëi t·ªõi `Settings > Secrets and variables > Actions` v√† th√™m c√°c secret `RELEASE_KEYSTORE_BASE64`, `RELEASE_KEYSTORE_PASSWORD`, `RELEASE_KEY_ALIAS`, `RELEASE_KEY_PASSWORD`.
          2. **K√≠ch ho·∫°t Workflow:** Workflow s·∫Ω t·ª± ch·∫°y sau khi ƒë∆∞·ª£c commit. B·∫°n c≈©ng c√≥ th·ªÉ v√†o tab 'Actions' ƒë·ªÉ ch·∫°y th·ªß c√¥ng.
        """
        comment_on_issue(success_message)
        
    except Exception as e:
        import traceback
        error_trace = traceback.format_exc()
        error_message = f"‚ùå **ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng:**\n\n**L·ªói:**\n```\n{e}\n```\n\n**Traceback:**\n```\n{error_trace}\n```"
        comment_on_issue(error_message)
        sys.exit(1)
